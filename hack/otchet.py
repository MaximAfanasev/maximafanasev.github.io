1. Структура отчёта
Хороший отчёт должен быть чётким, детализированным и полезным. Основные разделы:

1.1. Общая информация
Название уязвимости (например, "SQL-инъекция в /api/search").

Дата обнаружения.
Имя исследователя (или компании).
Контактные данные (если требуется обратная связь).

1.2. Описание уязвимости
Краткое описание проблемы (1-2 предложения).

Тип уязвимости (XSS, SQLi, RCE, IDOR и т. д.).
Ссылки на CVE/CWE (если есть).

1.3. Уровень критичности
Обычно оценивается по шкале CVSS (Common Vulnerability Scoring System):
Low (3.9 и ниже) – минимальный риск (например, раскрытие версии ПО).
Medium (4.0–6.9) – средний риск (например, CSRF).
High (7.0–8.9) – серьёзная угроза (например, SQL-инъекция).
Critical (9.0–10.0) – критические уязвимости (RCE, полный доступ к системе).

1.4. Шаги воспроизведения (PoC – Proof of Concept)
Пошаговая инструкция, как эксплуатировать уязвимость:
URL/Эндпоинт (например, https://example.com/login).
Параметры запроса (если есть).
Пример эксплойта (код, cURL-запрос, скриншоты).
Пример для SQL-инъекции:
http
GET /search?query=' OR 1=1-- HTTP/1.1  
Host: example.com  
1.5. Воздействие (Impact)
Что можно сделать, используя эту уязвимость?

Кража данных?
Обход аутентификации?
Получение прав администратора?

1.6. Рекомендации по исправлению
Конкретные способы устранения:

Для SQLi – использовать параметризованные запросы.
Для XSS – экранировать вывод (htmlspecialchars в PHP).
Для IDOR – проверка прав доступа перед выдачей данных.

1.7. Дополнительные материалы
Ссылки на аналогичные уязвимости.

Логи (если нужны для анализа).

2. Форматы отчётов
2.1. Текстовый (Markdown, PDF, DOCX)
Подходит для Bug Bounty (HackerOne, Bugcrowd) и внутренних отчётов.

Пример Markdown:

markdown
# Отчёт об уязвимости: XSS в форме комментариев  

**Дата:** 2024-05-20  
**Критичность:** High (CVSS:7.1)  

## Описание  
Хранимая XSS в форме комментариев позволяет внедрить JavaScript-код.  

## Шаги воспроизведения  
1. Перейти на `https://example.com/comments`.  
2. Ввести в поле комментария:  
   ```html
   <script>alert(document.cookie)</script>
После сохранения скрипт выполняется у всех пользователей.

Рекомендации
Экранировать HTML-теги (<, >, &).

Использовать CSP (Content Security Policy).


### **2.2. JSON (для автоматических сканеров)**  
Используется в инструментах (Nessus, Burp Suite).  

**Пример:**  
```json
{
  "vulnerability": "SQL Injection",
  "severity": "High",
  "url": "https://example.com/search",
  "steps": "Send ' OR 1=1-- in query parameter",
  "remediation": "Use prepared statements"
}
2.3. Табличный формат (Excel, CSV)
Удобен для массового анализа уязвимостей.

Уязвимость	URL	Критичность	Описание
XSS	example.com/search	High	Хранимая XSS в поиске
3. Примеры реальных отчётов
3.1. Для Bug Bounty (HackerOne)
markdown
## Описание  
Обход аутентификации через подделку JWT-токена.  

## Шаги воспроизведения  
1. Войти в систему, перехватить JWT в Burp.  
2. Изменить `"role": "user"` → `"role": "admin"`.  
3. Отправить запрос – доступ к админ-панели.  

## Рекомендации  
- Подписывать JWT секретным ключом.  
- Проверять роль на сервере.  
3.2. Для внутреннего пентеста
markdown
# Уязвимость: RCE через десериализацию  

**Сервис:** API управления сервером (`api/admin`)  
**Уровень:** Critical (CVSS:9.8)  

## Эксплуатация  
1. Отправить сериализованный объект:  
   ```python
   import pickle, base64  
   payload = b"cos\nsystem\n(S'rm -rf /'\ntR."  
   print(base64.b64encode(payload))  
Сервер выполняет команду rm -rf /.

Как исправить
Запретить десериализацию непроверенных данных.

Использовать JSON вместо pickle.


---

## **4. Советы по написанию**  
✅ **Быть конкретным** – вместо "есть XSS" показать **как именно** её эксплуатировать.  
✅ **Добавлять скриншоты/видео** – особенно для сложных уязвимостей.  
✅ **Избегать излишней техничности** – если отчёт для менеджеров, добавить раздел "Бизнес-риски".  
✅ **Проверить орфографию** – небрежность снижает доверие.  

---

## **5. Инструменты для оформления**  
- **Burp Suite** (генерация отчётов в HTML/PDF).  
- **Dradis** (коллаборация при пентесте).  
- **LaTeX** (для профессиональных отчётов).  

---

### **Вывод**  
Хороший отчёт об уязвимости должен:  
1. **Чётко объяснять проблему**.  
2. **Давать шаги для воспроизведения**.  
3. **Предлагать способы исправления**.  

Чем качественнее отчёт – тем быстрее уязвимость будет устранена.