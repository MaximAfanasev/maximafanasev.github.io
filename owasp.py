OWASP Top 10 — это ежегодно обновляемый список самых критичных уязвимостей веб-приложений. Рассмотрим ключевые угрозы, примеры эксплуатации и методы защиты.

1. Инъекции (Injection)
1.1. SQL-инъекции (SQLi)
Что это: Внедрение зловредного SQL-кода через пользовательский ввод.

sql
-- Исходный запрос:  
SELECT * FROM users WHERE login = '$user' AND password = '$pass';  

-- Зловредный ввод:  
user = admin'--  
pass = anything  
-- Итоговый запрос:  
SELECT * FROM users WHERE login = 'admin'--' AND password = 'anything';  
Последствия:
Кража данных (логины, пароли, платежи).
Обход аутентификации.
Защита:
Использование подготовленных запросов (Prepared Statements).
Экранирование спецсимволов (mysqli_real_escape_string).
ORM (Hibernate, SQLAlchemy).

1.2. Командные инъекции (RCE)
Что это: Выполнение произвольных команд ОС через уязвимые параметры.

php
$ip = $_GET['ip'];  
system("ping " . $ip);  // Уязвимость  
Эксплуатация:

url
http://site.com/ping.php?ip=8.8.8.8; cat /etc/passwd  
Защита:

Использование escapeshellarg().
Запрет прямого выполнения пользовательского ввода.

2. Межсайтовый скриптинг (XSS)
Что это: Внедрение JavaScript-кода через пользовательский ввод.

2.1. Типы XSS
Тип	Где выполняется	Пример
Reflected	В ответе сервера (URL)	http://site.com/search?q=<script>alert(1)</script>
Stored	В базе данных (комментарии)	Вредоносный скрипт в посте на форуме.
DOM-based	В браузере (без сервера)	document.write(location.hash.slice(1))
Защита:
Экранирование HTML (htmlspecialchars в PHP).
CSP (Content Security Policy):

http
Content-Security-Policy: default-src 'self'  
3. Подделка межсайтовых запросов (CSRF)
Что это: Принуждение пользователя выполнить действие без его ведома.

html
<!-- Злоумышленник размещает на своём сайте: -->  
<img src="http://bank.com/transfer?to=hacker&amount=1000" width="0" height="0">  
Если пользователь авторизован в банке – деньги уйдут хакеру.

Защита:
CSRF-токены (уникальные для каждой сессии).
Проверка заголовка Origin/Referer.

4. Небезопасные десериализации
Что это: Преобразование данных (JSON, XML, бинарных) в объекты с выполнением кода.

python
import pickle  

data = b"cos\nsystem\n(S'rm -rf /'\ntR."  # Вредоносные данные  
pickle.loads(data)  # Выполнит команду!  
Защита:

Отказ от десериализации непроверенных данных.
Использование JSON вместо pickle.

5. Уязвимые и устаревшие компоненты
Что это: Использование библиотек с известными уязвимостями (например, Log4j).
Защита:
Регулярное обновление (npm audit, pip check).
SCA-сканирование (Dependabot, Snyk).

6. Некорректная настройка безопасности
Примеры:
Открытый доступ к .git, /.env.
Дефолтные пароли (admin:admin).
Защита:
Проверка прав доступа.
Автоматизированное сканирование (Nessus).

7. Недостатки контроля доступа
7.1. IDOR (Insecure Direct Object Reference)
Что это: Доступ к чужим данным через подмену ID.
Пример:

url
http://site.com/profile?id=123  # Меняем на id=124  
Защита:
Проверка прав пользователя перед доступом.

8. Межсайтовая утечка данных (XXE)
Что это: Чтение локальных файлов через XML.
Пример:

xml
<!DOCTYPE foo [ <!ENTITY xxe SYSTEM "file:///etc/passwd"> ]>  
<user>&xxe;</user>  
Защита:

Отключение обработки DTD.
Использование JSON вместо XML.

9. Недостатки мониторинга и логирования
Риски:
Атаки остаются незамеченными.
Решение:
Логирование всех критичных событий.
SIEM-системы (Splunk, ELK).

10. Server-Side Request Forgery (SSRF)
Что это: Принуждение сервера делать запросы к внутренним ресурсам.
Пример:

url
http://site.com/fetch?url=http://localhost/admin  
Защита:
Блокировка запросов к localhost, 127.0.0.1.
Использование allow-листов доменов.